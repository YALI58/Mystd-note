# 03_二分查找.py
# 2025/1/29   15:34

# 二分查找（折半查找）是一种效率较高的查找方法
# 前提条件：查找表中的数据必须是有序的（升序或降序）
# 基本思想：将表中间位置记录的关键字与查找关键字比较，
# 如果相等则查找成功；否则利用中间位置记录将表分成前、后两个子表，
# 如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，
# 否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，
# 使查找成功，或直到子表不存在为止，此时查找不成功。

def binary_search(lst, key):
    """
    二分查找算法
    :param lst: 有序列表（升序）
    :param key: 要查找的关键字
    :return: 如果找到返回索引，否则返回-1
    """
    left = 0  # 左边界
    right = len(lst) - 1  # 右边界
    
    while left <= right:
        mid = (left + right) // 2  # 中间位置
        if lst[mid] == key:  # 找到目标值
            return mid
        elif lst[mid] > key:  # 目标值在左半部分
            right = mid - 1
        else:  # 目标值在右半部分
            left = mid + 1
    return -1  # 没找到目标值

# 测试二分查找
# 注意：列表必须是有序的
test_list = [11, 12, 22, 25, 34, 64, 90]  # 升序排列
search_key = 25

# 查找元素
result = binary_search(test_list, search_key)

# 输出结果
if result != -1:
    print(f"元素 {search_key} 在列表中的索引是 {result}")
else:
    print(f"元素 {search_key} 不在列表中")

# 二分查找的优缺点：
# 优点：
# 1. 查找效率高，时间复杂度为O(log n)
# 2. 适合于大数据量的查找

# 缺点：
# 1. 要求待查找的列表必须有序
# 2. 只适用于顺序存储结构（如数组），不适用于链式存储结构
# 3. 必须事先对数据进行排序，增加了额外的时间开销 